class Cube {
    static vertexList = [
        0,0,0, 0,0, -0.577,-0.577,-0.577,
        1,1,0, 1,1, 0.577,0.577,-0.577,
        1,0,0, 1,0, 0.577,-0.577,-0.577,
        0,0,0, 0,0, -0.577,-0.577,-0.577,
        0,1,0, 0,1, -0.577,0.577,-0.577,
        1,1,0, 1,1, 0.577,0.577,-0.577,
        0,0,1, 0,0, -0.577,-0.577,0.577,
        1,0,1, 1,0, 0.577,-0.577,0.577,
        1,1,1, 1,1, 0.577,0.577,0.577,
        1,1,1, 1,1, 0.577,0.577,0.577,
        0,1,1, 0,1, -0.577,0.577,0.577,
        0,0,1, 0,0, -0.577,-0.577,0.577,
        0,0,0, 0,0, -0.577,-0.577,-0.577,
        0,1,0, 1,0, -0.577,0.577,-0.577,
        0,0,1, 0,1, -0.577,-0.577,0.577,
        0,1,0, 1,0, -0.577,0.577,-0.577,
        0,1,1, 1,1, -0.577,0.577,0.577,
        0,0,1, 0,1, -0.577,-0.577,0.577,
        1,0,0, 0,0, 0.577,-0.577,-0.577,
        1,1,0, 1,0, 0.577,0.577,-0.577,
        1,1,1, 1,1, 0.577,0.577,0.577,
        1,1,1, 1,1, 0.577,0.577,0.577,
        1,0,1, 0,1, 0.577,-0.577,0.577,
        1,0,0, 0,0, 0.577,-0.577,-0.577,
        0,0,0, 0,0, -0.577,-0.577,-0.577,
        1,0,0, 1,0, 0.577,-0.577,-0.577,
        1,0,1, 1,1, 0.577,-0.577,0.577,
        1,0,1, 1,1, 0.577,-0.577,0.577,
        0,0,1, 0,1, -0.577,-0.577,0.577,
        0,0,0, 0,0, -0.577,-0.577,-0.577,
        0,1,0, 0,0, -0.577,0.577,-0.577,
        1,1,0, 1,0, 0.577,0.577,-0.577,
        1,1,1, 1,1, 0.577,0.577,0.577,
        1,1,1, 1,1, 0.577,0.577,0.577,
        0,1,1, 0,1, -0.577,0.577,0.577,
        0,1,0, 0,0, -0.577,0.577,-0.577
    ];


    constructor() {
        this.matrix = new Matrix4();
        this.color = [1.0, 1.0, 1.0, 1.0];
        this.textureWeight0 = 0;
        this.textureWeight1 = 0;
        this.normalMatrix = new Matrix4();
    }

    prepareRender() {
        for (var x = 0; x < 36; x++) {
            for (var i = 0; i < 8; i++) {
                Aggregate.allData.push(Cube.vertexList[8*x + i]);
            }
            Aggregate.allData.push(this.color[0], this.color[1], this.color[2], this.color[3]);
            for (var i = 0; i < 16; i++) {
                Aggregate.allData.push(this.matrix.elements[i]);
            }
            this.normalMatrix.setInverseOf(this.matrix);
            this.normalMatrix.transpose();
            for (var i = 0; i < 16; i++) {
                Aggregate.allData.push(this.normalMatrix.elements[i]);
            }
            Aggregate.allData.push(this.textureWeight0);
            Aggregate.allData.push(this.textureWeight1);
        }
    }
}